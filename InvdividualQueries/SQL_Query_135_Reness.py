import paramiko
import mysql.connector
from mysql.connector import connect, Error
import sshtunnel
import time

# SSH Configuration
ssh_host = '35.212.230.135'
ssh_port = 22
ssh_user = 'dev'
ssh_password = 'Inf2003dev'

# MySQL Configuration
mysql_host = 'localhost'  # or the IP address of your MySQL server
mysql_port = 3306
mysql_user = 'sqluser'
mysql_password = 'Inf2003user'
mysql_database = 'olist_db'

# Establish SSH connection
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

ssh_client.connect(ssh_host, ssh_port, ssh_user, ssh_password)
print("SSH Connection Established")

# Establish MySQL connection through SSH tunnel
tunnel = sshtunnel.SSHTunnelForwarder(
    (ssh_host, ssh_port),
    ssh_username=ssh_user,
    ssh_password=ssh_password,
    remote_bind_address=(mysql_host, mysql_port),
)
tunnel.start()
print("SSH Tunnel Established")

connection = mysql.connector.connect(
    user=mysql_user,
    host=mysql_host,
    port=tunnel.local_bind_port,
    password=mysql_password,
    database=mysql_database,
    use_pure=True,
)
print("MySQL Connection Established")

# MySQL query 2.1 Revenue generated by category
query_1 = "SELECT p.product_category_name, \
COUNT(DISTINCT oi.order_id) AS Num_orders, \
SUM(oi.price) AS Revenue \
FROM olist_order_items_dataset oi \
JOIN olist_products_dataset p ON oi.product_id = p.product_id \
JOIN olist_orders_dataset o ON oi.order_id = o.order_id \
WHERE o.order_status = 'delivered' AND o.order_delivered_customer_date IS NOT NULL \
GROUP BY p.product_category_name \
ORDER BY Revenue DESC; \
"

# MySQL query 2.3 Most popular category by geolocation
query_3 = "WITH StateCategorySales AS ( \
    SELECT \
        c.customer_state AS state, \
        p.product_category_name AS category, \
        COUNT(o.order_id) AS QuantitySold \
    FROM \
        olist_orders_dataset o \
        JOIN olist_order_items_dataset oi ON o.order_id = oi.order_id \
        JOIN olist_customers_dataset c ON o.customer_id = c.customer_id \
        JOIN olist_products_dataset p ON oi.product_id = p.product_id \
    WHERE \
        o.order_status = 'delivered'  -- Add condition for delivered orders \
    GROUP BY \
        c.customer_state, p.product_category_name \
) \
\
SELECT \
    scs.state AS _id, \
    scs.category AS HighestSoldCategory, \
    scs.QuantitySold \
FROM \
    StateCategorySales scs \
JOIN ( \
    SELECT \
        state, \
        MAX(QuantitySold) AS MaxQuantitySold \
    FROM \
        StateCategorySales \
    GROUP BY \
        state \
) maxSales ON scs.state = maxSales.state AND scs.QuantitySold = maxSales.MaxQuantitySold \
ORDER BY \
    scs.QuantitySold DESC, scs.state; \
"

# MySQL query 2.5 Location providing the most revenue
query_5 = "SELECT \
    c.customer_city, \
    c.customer_state, \
    ROUND(SUM(oi.price), 2) AS TotalRevenue \
FROM \
    olist_orders_dataset o \
JOIN \
    olist_order_items_dataset oi ON o.order_id = oi.order_id \
JOIN \
    olist_customers_dataset c ON o.customer_id = c.customer_id \
WHERE \
    o.order_status = 'delivered' \
    AND o.order_delivered_customer_date IS NOT NULL \
GROUP BY \
    c.customer_city, c.customer_state \
ORDER BY \
    TotalRevenue DESC LIMIT 10; \
"

cursor = connection.cursor()

# Executing query_1
cursor.execute(query_1)
result_1 = cursor.fetchall()
print("Result of query_1:")
for r in result_1:
    print(r)

# Executing query_3
# cursor.execute(query_3)
# result_3 = cursor.fetchall()
# print("\nResult of query_3:")
# for r in result_3:
#     print(r)

# Executing query_5
# cursor.execute(query_5)
# result_5 = cursor.fetchall()
# print("\nResult of query_5:")
# for r in result_5:
#     print(r)

cursor.close()
connection.close()
ssh_client.close()
