from flask import Flask, render_template
import paramiko
import mysql.connector
from mysql.connector import connect, Error
import sshtunnel
import matplotlib.pyplot as plt
from io import BytesIO
import base64
import pymongo
from dash import Dash, dcc, html, Output
from dash_table import DataTable
from dash.dependencies import Input, State
import pandas as pd
import webQuery1 as q1
import webQuery2 as q2
import webQuery3 as q3
import webQuery4 as q4
import webQuery5 as q5
import webQuery6 as q6
import webQuery7 as q7
import webQuery8 as q8
import webQuery9 as q9
import webQuery10 as q10

app = Flask(__name__)

@app.route('/')
def index():
    # SSH Configuration
    ssh_host = '35.212.230.135'
    ssh_port = 22
    ssh_user = 'dev'
    ssh_password = 'Inf2003dev'

    # MySQL Configuration
    mysql_host = 'localhost'  # or the IP address of your MySQL server
    mysql_port = 3306
    mysql_user = 'root'
    mysql_password = 'Inf2003root'
    mysql_database = 'olist_db'

    # Establish SSH connection
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_client.connect(ssh_host, ssh_port, ssh_user, ssh_password)
    print("SSH Connection Established")

    # Establish MySQL connection through SSH tunnel
    with sshtunnel.SSHTunnelForwarder(
            (ssh_host, ssh_port),
            ssh_username=ssh_user,
            ssh_password=ssh_password,
            remote_bind_address=(mysql_host, mysql_port),
    ) as tunnel:
        print("SSH Tunnel Established")
        print(tunnel)

        # MySQL Connection
        connection = mysql.connector.connect(
            user=mysql_user,
            host=mysql_host,
            port=tunnel.local_bind_port,
            password=mysql_password,
            database=mysql_database,
            use_pure=True,
        )
        print("MySQL Connection Established")

        # Query 1: Revenue generated by category
        q1_query = """
            SELECT p.product_category_name,COUNT(DISTINCT oi.order_id) AS Num_orders,SUM(oi.price) AS Revenue
            FROM olist_order_items_dataset oi
            JOIN olist_products_dataset p ON oi.product_id = p.product_id
            JOIN olist_orders_dataset o ON oi.order_id = o.order_id
            WHERE o.order_status <> 'canceled' AND o.order_delivered_customer_date IS NOT NULL
            GROUP BY p.product_category_name
            ORDER BY Revenue DESC LIMIT 10;
        """
        q1_df = pd.read_sql_query(q1_query, connection)
        q1_chart_labels = q1_df['product_category_name'].tolist()
        q1_chart_data = q1_df['Num_orders'].tolist()

        # Query 2: Number of 5-star reviews by category
        q2_query = """
            SELECT P.product_category_name, COUNT(R.review_score) AS Num_5_star_reviews
            FROM olist_order_reviews_dataset R
            JOIN olist_order_items_dataset I ON R.order_id = I.order_id
            JOIN olist_products_dataset P ON I.product_id = P.product_id
            WHERE R.review_score = 5
            GROUP BY P.product_category_name
            ORDER BY Num_5_star_reviews DESC LIMIT 10;
        """
        q2_df = pd.read_sql_query(q2_query, connection)
        q2_chart_labels = q2_df['product_category_name'].tolist()
        q2_chart_data = q2_df['Num_5_star_reviews'].tolist()

        # Query 3: Which category is the most popular by geolocation?
        q3_query = """
            WITH StateCategorySales AS (
            SELECT
                c.customer_state AS state,
                p.product_category_name AS category,
                COUNT(o.order_id) AS QuantitySold
            FROM
                olist_orders_dataset o
                JOIN olist_order_items_dataset oi ON o.order_id = oi.order_id
                JOIN olist_customers_dataset c ON o.customer_id = c.customer_id
                JOIN olist_products_dataset p ON oi.product_id = p.product_id
            WHERE
                o.order_status = 'delivered'
            GROUP BY
                c.customer_state, p.product_category_name
            )
            SELECT
                scs.state AS state,
                scs.category AS HighestSoldCategory,
                scs.QuantitySold
            FROM
                StateCategorySales scs
            JOIN (
                SELECT
                    state,
                    MAX(QuantitySold) AS MaxQuantitySold
                FROM
                    StateCategorySales
                GROUP BY
                    state
            ) maxSales ON scs.state = maxSales.state AND scs.QuantitySold = maxSales.MaxQuantitySold
            ORDER BY
                scs.QuantitySold DESC, scs.state;
        """
        q3_df = pd.read_sql_query(q3_query, connection)
        #print(q3_df)
        q3_chart_labels = q3_df['state'].tolist()
        q3_chart_data = q3_df['QuantitySold'].tolist()

        # Query 4: Frequently Bought items
        q4_query = """
            SELECT p.product_category_name, COUNT(oi.order_id) AS order_count
            FROM olist_order_items_dataset oi
            JOIN olist_products_dataset p ON oi.product_id = p.product_id
            GROUP BY p.product_category_name
            ORDER BY order_count DESC;
        """
        q4_df = pd.read_sql_query(q4_query, connection)
        q4_chart_labels = q4_df['product_category_name'].tolist()
        q4_chart_data = q4_df['order_count'].tolist()

        # Query 6: Payment Type Distribution
        q6_query = """
            SELECT payment_type, COUNT(order_id) AS payment_count
            FROM olist_order_payments_dataset
            GROUP BY payment_type
            ORDER BY payment_count DESC;
        """
        q6_df = pd.read_sql_query(q6_query, connection)
        q6_chart_labels = q6_df['payment_type'].tolist()
        q6_chart_data = q6_df['payment_count'].tolist()

        # Query 8: Average delivery time and freight fee
        q8_query = """
            SELECT
                ROUND(AVG(average_delivery_time),2) AS overall_average_delivery_time,
                ROUND(AVG(average_delivery_fee),2) AS overall_average_delivery_fee
            FROM (
                SELECT
                    OI.order_id,
                    AVG(TIMESTAMPDIFF(SECOND, O.order_delivered_carrier_date, O.order_delivered_customer_date) / 3600) AS average_delivery_time,
                    AVG(OI.freight_value) AS average_delivery_fee
                FROM olist_order_items_dataset OI
                JOIN olist_orders_dataset O ON OI.order_id = O.order_id
                WHERE O.order_status = 'delivered'
                GROUP BY OI.order_id
            ) AS subquery;
        """
        q8_df = pd.read_sql_query(q8_query, connection)
        q8_data1 = q8_df['overall_average_delivery_time'].tolist()
        q8_data2 = q8_df['overall_average_delivery_fee'].tolist()


        # Generate the bar charts
        q1_chart_image = q1.generate_bar_chart(q1_chart_data, q1_chart_labels, 'Revenue generated by category')
        q2_chart_image = q2.generate_bar_chart(q2_chart_data, q2_chart_labels, 'Which product category appears most in 5* review?')
        q3_chart_image = q3.generate_bar_chart(q3_chart_data, q3_chart_labels, 'Which category is the most popular by geolocation?')
        q4_chart_image = q4.generate_bar_chart(q4_chart_data, q4_chart_labels, 'Frequently Bought items', top_n=10)
        q6_chart_image = q6.generate_bar_chart(q6_chart_data, q6_chart_labels, 'Payment Type Distribution')
        q8_chart_image = q8.generate_dual_bar_chart(q8_data1, q8_data2, ['Average Delivery Time and Fee'],'Average Delivery Time and Fee' )

        return render_template('home/index.html',
                           q1_chart_image=q1_chart_image,
                           q2_chart_image=q2_chart_image,
                           q3_chart_image=q3_chart_image,
                           q4_chart_image=q4_chart_image,
                           q6_chart_image=q6_chart_image,
                           q8_chart_image=q8_chart_image
                           )

if __name__ == '__main__':
    app.run(debug=True)
