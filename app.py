from flask import Flask, render_template
import paramiko
import mysql.connector
from mysql.connector import connect, Error
import sshtunnel
import matplotlib.pyplot as plt
from io import BytesIO
import base64
import pymongo
from dash import Dash, dcc, html, Output
from dash_table import DataTable
from dash.dependencies import Input, State
import pandas as pd
import webQuery1 as q1
import webQuery2 as q2

app = Flask(__name__)

@app.route('/')
def index():
    # SSH Configuration
    ssh_host = '35.212.230.135'
    ssh_port = 22
    ssh_user = 'dev'
    ssh_password = 'Inf2003dev'

    # MySQL Configuration
    mysql_host = 'localhost'  # or the IP address of your MySQL server
    mysql_port = 3306
    mysql_user = 'root'
    mysql_password = 'Inf2003root'
    mysql_database = 'olist_db'

    # Establish SSH connection
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    ssh_client.connect(ssh_host, ssh_port, ssh_user, ssh_password)
    print("SSH Connection Established")

    # Establish MySQL connection through SSH tunnel
    with sshtunnel.SSHTunnelForwarder(
            (ssh_host, ssh_port),
            ssh_username=ssh_user,
            ssh_password=ssh_password,
            remote_bind_address=(mysql_host, mysql_port),
    ) as tunnel:
        print("SSH Tunnel Established")
        print(tunnel)

        # MySQL Connection
        connection = mysql.connector.connect(
            user=mysql_user,
            host=mysql_host,
            port=tunnel.local_bind_port,
            password=mysql_password,
            database=mysql_database,
            use_pure=True,
        )
        print("MySQL Connection Established")

        # Query 1: Revenue generated by category
        cursor = connection.cursor()
        cursor.execute("""
            SELECT p.product_category_name,COUNT(DISTINCT oi.order_id) AS Num_orders,SUM(oi.price) AS Revenue
            FROM olist_order_items_dataset oi
            JOIN olist_products_dataset p ON oi.product_id = p.product_id
            JOIN olist_orders_dataset o ON oi.order_id = o.order_id
            WHERE o.order_status <> 'canceled' AND o.order_delivered_customer_date IS NOT NULL
            GROUP BY p.product_category_name
            ORDER BY Revenue DESC LIMIT 10;
        """)
        result = cursor.fetchall()
        chart_labels = [str(row[0]) for row in result]
        chart_data = [row[1] for row in result]

        # Query 2: Number of 5-star reviews by category
        cursor.execute("""
            SELECT P.product_category_name, COUNT(R.review_score) AS Num_5_star_reviews
            FROM olist_order_reviews_dataset R
            JOIN olist_order_items_dataset I ON R.order_id = I.order_id
            JOIN olist_products_dataset P ON I.product_id = P.product_id
            WHERE R.review_score = 5
            GROUP BY P.product_category_name
            ORDER BY Num_5_star_reviews DESC LIMIT 10;
        """)

        result_reviews = cursor.fetchall()
        chart_labels_reviews = [str(row[0]) for row in result_reviews]
        chart_data_reviews = [row[1] for row in result_reviews]

        cursor.close()
        connection.close()
        ssh_client.close()

        # Generate the bar charts
        chart_image = q1.generate_bar_chart(chart_data, chart_labels, 'Revenue generated by category')
        chart_image_reviews = q2.generate_bar_chart(chart_data_reviews, chart_labels_reviews, 'Which product category appears most in 5* review?')
        
    return render_template('home/index.html',
                           chart_image=chart_image,
                           data=result,
                           chart_image_reviews=chart_image_reviews,
                           data_reviews=result_reviews)


if __name__ == '__main__':
    app.run(debug=True)
