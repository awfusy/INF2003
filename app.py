from flask import Flask, render_template
import paramiko
import mysql.connector	
from mysql.connector import connect, Error
import sshtunnel
import matplotlib.pyplot as plt
from io import BytesIO
import base64
import pymongo
from dash import Dash, dcc, html, Output
from dash_table import DataTable
from dash.dependencies import Input, State
import pandas as pd

app = Flask(__name__)
dash_app = Dash(__name__, server=app, url_base_pathname='/dashboard/')

def generate_bar_chart(data, labels):
    # Sort data and labels in descending order
    sorted_data, sorted_labels = zip(*sorted(zip(data, labels), reverse=True))

    plt.figure(figsize=(8, 6))
    plt.bar(sorted_labels, sorted_data, color='skyblue')

    # Determine the maximum label length
    max_label_length = max(len(str(label)) for label in sorted_labels)

    # Adjust font size dynamically based on label length
    font_size = min(8, 200 / max_label_length)  # You can adjust the divisor for fine-tuning

    plt.xlabel('Category', fontsize=font_size)
    plt.ylabel('Revenue', fontsize=font_size)
    plt.title('Revenue generated by category', fontsize=font_size + 6)  # Increase title font size slightly
    plt.xticks(rotation=20, ha='right', fontsize=font_size)  # Rotate and slant X-axis labels

    # Save the plot to a BytesIO object
    image_stream = BytesIO()
    plt.savefig(image_stream, format='png')
    image_stream.seek(0)

    # Encode the image as base64
    image_base64 = base64.b64encode(image_stream.read()).decode('utf-8')
    plt.close()

    return image_base64

@app.route('/')
def index():
    # SSH Configuration
    ssh_host = '35.212.230.135'
    ssh_port = 22
    ssh_user = 'dev'
    ssh_password = 'Inf2003dev'

    # MySQL Configuration
    mysql_host = 'localhost'  # or the IP address of your MySQL server
    mysql_port = 3306
    mysql_user = 'root'
    mysql_password = 'Inf2003root'
    mysql_database = 'olist_db'
    # Establish SSH connection
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())


    ssh_client.connect(ssh_host, ssh_port, ssh_user, ssh_password)
    print("SSH Connection Established")

    

    # Establish MySQL connection through SSH tunnel
    with sshtunnel.SSHTunnelForwarder(
            (ssh_host, ssh_port),
            ssh_username=ssh_user,
            ssh_password=ssh_password,
            remote_bind_address=(mysql_host, mysql_port),
    ) as tunnel:
        print("SSH Tunnel Established")
        print(tunnel)
        
        connection = mysql.connector.connect(
                user=mysql_user,
                host=mysql_host,
                port=tunnel.local_bind_port,
                password=mysql_password,
                database=mysql_database,
                use_pure=True,  
                        
        )
        print("MySQL Connection Established")

        # Your MySQL query here
        cursor = connection.cursor()
        cursor.execute("SELECT p.product_category_name,COUNT(DISTINCT oi.order_id) AS Num_orders,SUM(oi.price) AS Revenue FROM olist_order_items_dataset oi JOIN olist_products_dataset p ON oi.product_id = p.product_id JOIN olist_orders_dataset o ON oi.order_id = o.order_id WHERE o.order_status <> 'canceled' AND o.order_delivered_customer_date IS NOT NULL GROUP BY p.product_category_name ORDER BY Revenue DESC LIMIT 10;")
        result = cursor.fetchall();
        # print(result)
        # Extract data for the chart (example assumes two columns: id and value)
        chart_labels = [str(row[0]) for row in result]
        chart_data = [row[1] for row in result]
        
        cursor.close()
        connection.close()
        # Close SSH connection
        ssh_client.close()

        # Generate the bar chart
        chart_image = generate_bar_chart(chart_data, chart_labels)

        # Connect to the MongoDB database
        client = pymongo.MongoClient("mongodb+srv://INF2003:wJL8pGXxgGQzqhaP@inf2003.xqigi2t.mongodb.net/")
        db = client["INF2003"]  # Replace with your database name

    # Convert the result to a pandas DataFrame
    df = pd.DataFrame(result, columns=['Product Category', 'Num Orders', 'Revenue'])

    # Dash DataTable
    dash_app.layout = html.Div([
        dcc.Graph(
            id='revenue-bar-chart',
            figure={
                'data': [
                    {'x': chart_labels, 'y': chart_data, 'type': 'bar', 'name': 'Revenue'},
                ],
                'layout': {
                    'title': 'Top 10 Product Categories by Revenue',
                    'xaxis': {'title': 'Product Category'},
                    'yaxis': {'title': 'Revenue'},
                }
            }
        ),
        DataTable(
            id='datatable',
            columns=[
                {'name': 'Product Category', 'id': 'Product Category'},
                {'name': 'Num Orders', 'id': 'Num Orders'},
                {'name': 'Revenue', 'id': 'Revenue'},
            ],
            data=df.to_dict('records'),
        )
    ])

    return render_template('home/index.html', chart_image=chart_image, data=result)

if __name__ == '__main__':
    app.run(debug=True)
